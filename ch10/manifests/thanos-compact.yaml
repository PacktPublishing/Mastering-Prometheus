---
apiVersion: "v1"
kind: "Service"
metadata:
  labels:
    app.kubernetes.io/component: "database-compactor"
    app.kubernetes.io/instance: "thanos-compact"
    app.kubernetes.io/name: "thanos-compact"
    app.kubernetes.io/version: "v0.31.0"
  name: "thanos-compact"
  namespace: "prometheus"
spec:
  clusterIP: "None"
  ports:
  - name: "http"
    port: 10902
    targetPort: 10902
  selector:
    app.kubernetes.io/component: "database-compactor"
    app.kubernetes.io/instance: "thanos-compact"
    app.kubernetes.io/name: "thanos-compact"
---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/component: "database-compactor"
    app.kubernetes.io/instance: "thanos-compact"
    app.kubernetes.io/name: "thanos-compact"
    app.kubernetes.io/version: "v0.31.0"
  name: "thanos-compact"
  namespace: "prometheus"
---
apiVersion: "monitoring.coreos.com/v1"
kind: "ServiceMonitor"
metadata:
  labels:
    app.kubernetes.io/component: "database-compactor"
    app.kubernetes.io/instance: "thanos-compact"
    app.kubernetes.io/name: "thanos-compact"
    app.kubernetes.io/version: "v0.31.0"
  name: "thanos-compact"
  namespace: "prometheus"
spec:
  endpoints:
  - port: "http"
    relabelings:
    - action: "replace"
      separator: "/"
      sourceLabels:
      - "namespace"
      - "pod"
      targetLabel: "instance"
  selector:
    matchLabels:
      app.kubernetes.io/component: "database-compactor"
      app.kubernetes.io/instance: "thanos-compact"
      app.kubernetes.io/name: "thanos-compact"
---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  labels:
    app.kubernetes.io/component: "database-compactor"
    app.kubernetes.io/instance: "thanos-compact"
    app.kubernetes.io/name: "thanos-compact"
    app.kubernetes.io/version: "v0.31.0"
  name: "thanos-compact"
  namespace: "prometheus"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: "database-compactor"
      app.kubernetes.io/instance: "thanos-compact"
      app.kubernetes.io/name: "thanos-compact"
  serviceName: "thanos-compact"
  template:
    metadata:
      labels:
        app.kubernetes.io/component: "database-compactor"
        app.kubernetes.io/instance: "thanos-compact"
        app.kubernetes.io/name: "thanos-compact"
        app.kubernetes.io/version: "v0.31.0"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/name"
                  operator: "In"
                  values:
                  - "thanos-compact"
                - key: "app.kubernetes.io/instance"
                  operator: "In"
                  values:
                  - "thanos-compact"
              namespaces:
              - "prometheus"
              topologyKey: "kubernetes.io/hostname"
            weight: 100
      containers:
      - args:
        - "compact"
        - "--wait"
        - "--log.level=info"
        - "--log.format=logfmt"
        - "--objstore.config=$(OBJSTORE_CONFIG)"
        - "--data-dir=/var/thanos/compact"
        - "--debug.accept-malformed-index"
        - "--retention.resolution-raw=0d"
        - "--retention.resolution-5m=0d"
        - "--retention.resolution-1h=0d"
        - "--delete-delay=48h"
        - "--compact.concurrency=1"
        - "--downsample.concurrency=1"
        - "--deduplication.replica-label=prometheus_replica"
        env:
        - name: "OBJSTORE_CONFIG"
          valueFrom:
            secretKeyRef:
              key: "thanos.yaml"
              name: "thanos-objstore-config"
        - name: "HOST_IP_ADDRESS"
          valueFrom:
            fieldRef:
              fieldPath: "status.hostIP"
        image: "quay.io/thanos/thanos:v0.31.0"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: "/-/healthy"
            port: 10902
            scheme: "HTTP"
          periodSeconds: 30
        name: "thanos-compact"
        ports:
        - containerPort: 10902
          name: "http"
        readinessProbe:
          failureThreshold: 20
          httpGet:
            path: "/-/ready"
            port: 10902
            scheme: "HTTP"
          periodSeconds: 5
        resources: {}
        terminationMessagePolicy: "FallbackToLogsOnError"
        volumeMounts:
        - mountPath: "/var/thanos/compact"
          name: "data"
          readOnly: false
      nodeSelector:
        kubernetes.io/os: "linux"
      securityContext:
        fsGroup: 65534
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: "RuntimeDefault"
      serviceAccountName: "thanos-compact"
      terminationGracePeriodSeconds: 120
      volumes:
      - emptyDir: {}
        name: "data"
  volumeClaimTemplates: []
...
